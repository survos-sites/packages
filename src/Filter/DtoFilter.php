<?php

namespace App\Filter;

use ApiPlatform\Doctrine\Orm\Filter\SearchFilter;
use ApiPlatform\Doctrine\Orm\Util\QueryNameGeneratorInterface;
use ApiPlatform\Metadata\FilterInterface;
use ApiPlatform\Metadata\Operation;
use Doctrine\ORM\QueryBuilder;
use Symfony\Component\HttpFoundation\Request;

class DtoFilter  implements FilterInterface
{
    public function __construct( ?array $properties = null,)
    {
        dump($properties);
        // Parent expects Doctrine's ManagerRegistry, pass null safely
//        parent::__construct(null);
    }

    public function getDescription(string $resourceClass): array
    {
        if ($resourceClass !== \App\Dto\PackageDto::class) {
            return [];
        }

        return [
            'name' => [
                'property' => 'name',
                'type' => 'string',
                'required' => false,
                'swagger' => [
                    'description' => 'Filter by name (partial match)',
                ],
            ],
        ];
    }

    public function apply(QueryBuilder $queryBuilder, QueryNameGeneratorInterface $queryNameGenerator, string $resourceClass, ?Operation $operation = null, array $context = []): void
    {
        return;
//        parent::apply($queryBuilder, $queryNameGenerator, $resourceClass, $operation, $context); // TODO: Change the autogenerated stub
    }


    public function applyxx(Request $request, bool $isCollection, Operation $operation, array &$context): void
    {
        // Extract the query parameter
        $name = $request->query->get('name');

        if ($name) {
            $filters = $context['filters'] ?? [];
            $filters['name'] = $name;
            $context['filters'] = $filters;
        }
    }
}

